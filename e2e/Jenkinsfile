pipeline {
  agent {
    docker {
      image 'everpeace/curl-jq'
    }
  } 
  environment {
    REPORTS_FOLDER = 'junit-reports'
    JELASTIC_CREDENTIALS = credentials('jelastic-credentials')
    JELASTIC_APP_CREDENTIALS = credentials('jelastic-app-credentials')
    BACKEND_NAME = credentials('backend-name-credentials') // contains envName + e2e jps url
    FRONTEND_NAME = credentials('mgmt-frontend-name-credentials') // contains envName + e2e jps url
  }
  stages {
    stage('Starting up backend environment') {
      environment {
        BACKEND_JPS = 'backend.jps'
      }
      steps {
        script {
          sh "curl -o backend.jps https://raw.githubusercontent.com/softozor/shopozor-backend/dev/e2e/manifest.jps"
          def ant = new AntBuilder()
          // ant.replace(file: "myFile", token: "NEEDLE", value: "replacement")
          sh "sed -i \"s/GIT_USER/$GITHUB_CREDENTIALS_USR/g\" $BACKEND_JPS"
          sh "sed -i \"s/GIT_PASSWORD/$GITHUB_CREDENTIALS_PSW/g\" $BACKEND_JPS"
          sh "sed -i \"s/GIT_BRANCH/dev/g\" $BACKEND_JPS"
          sh "./deploy-to-jelastic.sh $JELASTIC_APP_CREDENTIALS_USR $JELASTIC_APP_CREDENTIALS_PSW $JELASTIC_CREDENTIALS_USR $JELASTIC_CREDENTIALS_PSW $BACKEND_NAME_USR cp $BACKEND_JPS"
        }
      }
    }
    stage('Starting up frontend and performing end-to-end tests') {
      environment {
        BITBUCKET_CREDENTIALS = credentials('bitbucket-credentials')
        FRONTEND_JPS = 'manifest.jps'
      }
      steps {
        sh "sed -i \"s/GIT_USER/$BITBUCKET_CREDENTIALS_USR/g\" $FRONTEND_JPS"
        sh "sed -i \"s/GIT_PASSWORD/$BITBUCKET_CREDENTIALS_PSW/g\" $FRONTEND_JPS"
        sh "sed -i \"s/GIT_BRANCH/master/g\" $FRONTEND_JPS"
        // TODO: set backend api url
        sh "./deploy-to-jelastic.sh $JELASTIC_APP_CREDENTIALS_USR $JELASTIC_APP_CREDENTIALS_PSW $JELASTIC_CREDENTIALS_USR $JELASTIC_CREDENTIALS_PSW $FRONTEND_NAME_USR cp $FRONTEND_JPS"
      }
    }
    stage('Retrieving test reports from frontend environment') {
      steps {
        deleteFolder(REPORTS_FOLDER)
        // open ssh connection with frontend environment
      }
    }
    stage('Retrieving artifacts from frontend environment') {
      steps {
        // open ssh connection with frontend environment
        echo "trouduc"
      }
    }
    stage('Stopping frontend environment') {
      steps {
        sh "./deploy-to-jelastic.sh $JELASTIC_APP_CREDENTIALS_USR $JELASTIC_APP_CREDENTIALS_PSW $JELASTIC_CREDENTIALS_USR $JELASTIC_CREDENTIALS_PSW $FRONTEND_NAME_USR"
      }
    }
    stage('Stopping backend environment') {
      steps {
        sh "./deploy-to-jelastic.sh $JELASTIC_APP_CREDENTIALS_USR $JELASTIC_APP_CREDENTIALS_PSW $JELASTIC_CREDENTIALS_USR $JELASTIC_CREDENTIALS_PSW $BACKEND_NAME_USR"
      }
    }
  }
  post {
    always {
      junit "**/$REPORTS_FOLDER/*.xml"
      archiveArtifacts artifacts: 'cypress/videos/**/*.mp4, cypress/screenshots/**/*.png'
    }
  }
}

def deleteFolder(folderName) {
  script {
    dir(folderName) {
      deleteDir()
    }
  }
}