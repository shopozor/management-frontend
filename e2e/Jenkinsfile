pipeline {
  // TODO: problem: jenkins makes a check out for every agent ... it might be better to just install yarn and npm on the jenkins node ... 
  agent none
  environment {
    REPORTS_FOLDER = 'junit-reports'
    JELASTIC_CREDENTIALS = credentials('jelastic-credentials')
    JELASTIC_APP_CREDENTIALS = credentials('jelastic-app-credentials')
    BACKEND_NAME = credentials('backend-name-credentials') // contains envName + e2e jps url
    FRONTEND_NAME = credentials('mgmt-frontend-name-credentials') // contains envName
  }
  stages {
    stage('Starting up backend environment') {
      agent any
      environment {
        GITHUB_CREDENTIALS = credentials('github-credentials')
        BACKEND_JPS = 'backend.jps'
      }
      steps {
        sh "curl -o $BACKEND_JPS $BACKEND_NAME_PSW"
        sh "sed -i \"s/GIT_USER/$GITHUB_CREDENTIALS_USR/g\" $BACKEND_JPS"
        sh "sed -i \"s/GIT_PASSWORD/$GITHUB_CREDENTIALS_PSW/g\" $BACKEND_JPS"
        sh "sed -i \"s/GIT_BRANCH/dev/g\" $BACKEND_JPS"
        sh "chmod u+x ./common/e2e/deploy-to-jelastic.sh"
        sh "./common/e2e/deploy-to-jelastic.sh $JELASTIC_APP_CREDENTIALS_USR $JELASTIC_APP_CREDENTIALS_PSW $JELASTIC_CREDENTIALS_USR $JELASTIC_CREDENTIALS_PSW $BACKEND_NAME_USR cp $BACKEND_JPS"
      }
    }
    stage('Building frontend app') {
      agent {
        docker {
          image 'node'
        }
      }
      environment {
        GRAPHQL_API = "http://${BACKEND_NAME_USR}.hidora.com/graphql/"
      }
      steps {
        sh "yarn && yarn build"
      }
    }
    stage('Starting up frontend and performing end-to-end tests') {
      agent any
      environment {
        BITBUCKET_CREDENTIALS = credentials('bitbucket-credentials')
        DOCKER_CREDENTIALS = credentials('docker-credentials')
        DOCKER_REPO = "softozor/${FRONTEND_NAME}"
        FRONTEND_JPS = './common/e2e/manifest.jps'
      }
      steps {
        sh "docker login -u $DOCKER_CREDENTIALS_USR -p $DOCKER_CREDENTIALS_PSW"
        sh "cp e2e/Dockerfile ."
        sh "docker build -t $DOCKER_REPO ."
        sh "docker push $DOCKER_REPO"
        sh "chmod u+x ./common/e2e/deploy-to-jelastic.sh"
        sh "./common/e2e/deploy-to-jelastic.sh $JELASTIC_APP_CREDENTIALS_USR $JELASTIC_APP_CREDENTIALS_PSW $JELASTIC_CREDENTIALS_USR $JELASTIC_CREDENTIALS_PSW $FRONTEND_NAME cp $FRONTEND_JPS"
      }
    }
    stage('Retrieving test reports from frontend environment') {
      agent any
      steps {
        deleteFolder(REPORTS_FOLDER)
        // TODO: try this: AddMountPointById( envName, session, nodeId, path, [protocol], [sourceHost], sourcePath, [sourceNodeId], [name], [readOnly], [sourceAddressType] ) : Response
        // open ssh connection with frontend environment
      }
    }
    stage('Retrieving artifacts from frontend environment') {
      agent any
      steps {
        // open ssh connection with frontend environment
        echo "trouduc"
      }
    }
  }
  post {
    agent any
    always {
      // the environment deletion will trigger a reinstall next time
      // a frontend reinstall is required because at the end of the manifest's installation, we know that the tests are done
      sh "chmod u+x ./common/e2e/delete-jelastic-env.sh"
      // sh "./common/e2e/delete-jelastic-env.sh $JELASTIC_APP_CREDENTIALS_USR $JELASTIC_APP_CREDENTIALS_PSW $JELASTIC_CREDENTIALS_USR $JELASTIC_CREDENTIALS_PSW $FRONTEND_NAME"
      sh "chmod u+x ./common/e2e/stop-jelastic-env.sh"
      // sh "./common/e2e/stop-jelastic-env.sh $JELASTIC_APP_CREDENTIALS_USR $JELASTIC_APP_CREDENTIALS_PSW $JELASTIC_CREDENTIALS_USR $JELASTIC_CREDENTIALS_PSW $BACKEND_NAME_USR"
      junit "**/$REPORTS_FOLDER/*.xml"
      archiveArtifacts artifacts: 'cypress/videos/**/*.mp4, cypress/screenshots/**/*.png'
    }
  }
}

def deleteFolder(folderName) {
  script {
    dir(folderName) {
      deleteDir()
    }
  }
}