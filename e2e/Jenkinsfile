pipeline {
  agent any
  environment {  
    BACKEND_NAME = credentials('backend-name-credentials') // contains envName + e2e jps url
    FRONTEND_NAME = credentials('mgmt-frontend-name-credentials') // contains envName
    JELASTIC_APP_CREDENTIALS = credentials('jelastic-app-credentials')
    JELASTIC_CREDENTIALS = credentials('jelastic-credentials')
    // PATH_TO_TEST_RESULTS = '/home/node/test-results'
    PATH_TO_TEST_RESULTS = '/home/node'
    SCREENSHOTS_FOLDER = '/mnt/cypress/screenshots'
    TEST_REPORTS_FOLDER = '/mnt/junit-reports'
    VIDEOS_FOLDER = '/mnt/cypress/videos'
  }
  stages {
    stage('Starting up backend environment') {
      environment {
        GITHUB_CREDENTIALS = credentials('github-credentials')
        BACKEND_JPS = 'backend.jps'
        // CI_HOSTNAME = JENKINS_URL.split('/')[2].split(':')[0]
      }
      steps {
        // echo CI_HOSTNAME.split('.')[0]
        sh "curl -o $BACKEND_JPS $BACKEND_NAME_PSW"
        sh "sed -i \"s/GIT_USER/$GITHUB_CREDENTIALS_USR/g\" $BACKEND_JPS"
        sh "sed -i \"s/GIT_PASSWORD/$GITHUB_CREDENTIALS_PSW/g\" $BACKEND_JPS"
        sh "sed -i \"s/GIT_BRANCH/dev/g\" $BACKEND_JPS"
        sh "chmod u+x ./common/e2e/deploy-to-jelastic.sh"
        sh "./common/e2e/deploy-to-jelastic.sh $JELASTIC_APP_CREDENTIALS_USR $JELASTIC_APP_CREDENTIALS_PSW $JELASTIC_CREDENTIALS_USR $JELASTIC_CREDENTIALS_PSW $BACKEND_NAME_USR cp $BACKEND_JPS"
      }
    }
    stage('Building frontend app') {
      environment {
        GRAPHQL_API = "http://${BACKEND_NAME_USR}.hidora.com/graphql/"
      }
      steps {
        sh "yarn && yarn build"
      }
    }
    stage('Starting up frontend and performing end-to-end tests') {
      environment {
        BITBUCKET_CREDENTIALS = credentials('bitbucket-credentials')
        DOCKER_CREDENTIALS = credentials('docker-credentials')
        DOCKER_REPO = "softozor/${FRONTEND_NAME}"
        FRONTEND_JPS = './common/e2e/manifest.jps'
      }
      steps {
        sh "docker login -u $DOCKER_CREDENTIALS_USR -p $DOCKER_CREDENTIALS_PSW"
        sh "cp e2e/Dockerfile ."
        sh "docker build -t $DOCKER_REPO ."
        sh "docker push $DOCKER_REPO"
        // sh "sed -i \"s@PATH_TO_TEST_RESULTS_PLACEHOLDER@$PATH_TO_TEST_RESULTS@g\" $FRONTEND_JPS"
        sh "chmod u+x ./common/e2e/deploy-to-jelastic.sh"
        sh "./common/e2e/deploy-to-jelastic.sh $JELASTIC_APP_CREDENTIALS_USR $JELASTIC_APP_CREDENTIALS_PSW $JELASTIC_CREDENTIALS_USR $JELASTIC_CREDENTIALS_PSW $FRONTEND_NAME cp $FRONTEND_JPS"
      }
    }
    stage('Retrieving test results from frontend environment') {
      environment {
        JENKINS_ENV_NAME = 'shopozor-ci' // TODO: get this from the jenkins environment variables!
        TARGET_NODE_GROUP = 'cp'
        TARGET_PATH = '/mnt'
        SOURCE_NODE_GROUP = 'cp'
      }
      steps {
        // deleteFolder(TEST_REPORTS_FOLDER)
        // deleteFolder(VIDEOS_FOLDER)
        // deleteFolder(SCREENSHOTS_FOLDER)
        sh "chmod u+x ./common/e2e/mount-test-results.sh"
        // TODO: share the whole /home/node folder instead of copying everything over and over again
        sh "./common/e2e/mount-test-results.sh $JELASTIC_APP_CREDENTIALS_USR $JELASTIC_APP_CREDENTIALS_PSW $JELASTIC_CREDENTIALS_USR $JELASTIC_CREDENTIALS_PSW $JENKINS_ENV_NAME $TARGET_NODE_GROUP $TARGET_PATH $FRONTEND_NAME $SOURCE_NODE_GROUP $PATH_TO_TEST_RESULTS"
        // sh "cp -R /mnt/$TEST_REPORTS_FOLDER ."
        // sh "cp -R /mnt/$VIDEOS_FOLDER ."
        // sh "cp -R /mnt/$SCREENSHOTS_FOLDER ."
      }
    }
  }
  post {
    always {
      // the environment deletion will trigger a reinstall next time
      // a frontend reinstall is required because at the end of the manifest's installation, we know that the tests are done
      sh "chmod u+x ./common/e2e/delete-jelastic-env.sh"
      // sh "./common/e2e/delete-jelastic-env.sh $JELASTIC_APP_CREDENTIALS_USR $JELASTIC_APP_CREDENTIALS_PSW $JELASTIC_CREDENTIALS_USR $JELASTIC_CREDENTIALS_PSW $FRONTEND_NAME"
      sh "chmod u+x ./common/e2e/stop-jelastic-env.sh"
      // sh "./common/e2e/stop-jelastic-env.sh $JELASTIC_APP_CREDENTIALS_USR $JELASTIC_APP_CREDENTIALS_PSW $JELASTIC_CREDENTIALS_USR $JELASTIC_CREDENTIALS_PSW $BACKEND_NAME_USR"
      junit "$TEST_REPORTS_FOLDER/*.xml"
      archiveArtifacts artifacts: "$VIDEOS_FOLDER/**/*.mp4, $SCREENSHOTS_FOLDER/**/*.png"
    }
  }
}

def deleteFolder(folderName) {
  script {
    dir(folderName) {
      deleteDir()
    }
  }
}