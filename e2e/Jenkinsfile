pipeline {
  agent any
  environment {  
    BACKEND_NAME = credentials('backend-name-credentials') // contains envName + e2e jps url
    FRONTEND_NAME = credentials('mgmt-frontend-name-credentials') // contains envName
    JELASTIC_APP_CREDENTIALS = credentials('jelastic-app-credentials')
    JELASTIC_CREDENTIALS = credentials('jelastic-credentials')
    PATH_TO_TEST_RESULTS = '/home/node'
    SCREENSHOTS_FOLDER = 'screenshots'
    TEST_REPORTS_FOLDER = 'junit-reports'
    VIDEOS_FOLDER = 'videos'
  }
  stages {
    stage('Starting up backend environment') {
      environment {
        GITHUB_CREDENTIALS = credentials('github-credentials')
        BACKEND_JPS = 'backend.jps'
        // CI_HOSTNAME = JENKINS_URL.split('/')[2].split(':')[0]
      }
      steps {
        // echo CI_HOSTNAME.split('.')[0]
        script {
          def lib = load './e2e/CommonLib.groovy'
          lib.prepareBackendConfiguration(GITHUB_CREDENTIALS_USR, GITHUB_CREDENTIALS_PSW, 'dev', BACKEND_JPS, BACKEND_NAME_PSW)
          lib.deploy(BACKEND_JPS, BACKEND_NAME_USR)
        }
      }
    }
    stage('Building frontend app') {
      environment {
        GRAPHQL_API = "http://${BACKEND_NAME_USR}.hidora.com/graphql/"
      }
      steps {
        sh "yarn && yarn build"
      }
    }
    stage('Starting up frontend and performing end-to-end tests') {
      environment {
        DOCKER_CREDENTIALS = credentials('docker-credentials')
        DOCKER_REPO = "softozor/${FRONTEND_NAME}"
        FRONTEND_JPS = './common/e2e/manifest.jps'
      }
      steps {
        script {
          def lib = load './e2e/CommonLib.groovy'
          lib.buildDockerImage(DOCKER_CREDENTIALS_USR, DOCKER_CREDENTIALS_PSW, DOCKER_REPO)
          lib.deploy(FRONTEND_JPS, FRONTEND_NAME)
        }
      }
    }
    stage('Retrieving test results from frontend environment') {
      environment {
        JENKINS_ENV_NAME = 'shopozor-ci' // TODO: get this from the jenkins environment variables!
        TARGET_NODE_GROUP = 'cp'
        TARGET_PATH = '/mnt'
        SOURCE_NODE_GROUP = 'cp'
      }
      steps {
        script {
        // deleteFolder(TEST_REPORTS_FOLDER)
        // deleteFolder(VIDEOS_FOLDER)
        // deleteFolder(SCREENSHOTS_FOLDER)
        // sh "chmod u+x ./common/e2e/mount-test-results.sh"
        // sh "./common/e2e/mount-test-results.sh $JELASTIC_APP_CREDENTIALS_USR $JELASTIC_APP_CREDENTIALS_PSW $JELASTIC_CREDENTIALS_USR $JELASTIC_CREDENTIALS_PSW $JENKINS_ENV_NAME $TARGET_NODE_GROUP $TARGET_PATH $FRONTEND_NAME $SOURCE_NODE_GROUP $PATH_TO_TEST_RESULTS"
        // sh "cp -R $PATH_TO_SHARED_REPORTS ."
        // sh "cp -R $PATH_TO_SHARED_VIDEOS ."
        // sh "cp -R $PATH_TO_SHARED_SCREENSHOTS ."
          def lib = load './e2e/CommonLib.groovy'
          lib.retrieveTestResults(SCREENSHOTS_FOLDER, VIDEOS_FOLDER, TEST_REPORTS_FOLDER, JENKINS_ENV_NAME, TARGET_NODE_GROUP, TARGET_PATH, FRONTEND_NAME, SOURCE_NODE_GROUP, PATH_TO_TEST_RESULTS)
        }
      }
    }
  }
  post {
    // TODO: parameterize frontend environment deletion
    always {
      // the environment deletion will trigger a reinstall next time
      // a frontend reinstall is required because at the end of the manifest's installation, we know that the tests are done
      sh "chmod u+x ./common/e2e/delete-jelastic-env.sh"
      // sh "./common/e2e/delete-jelastic-env.sh $JELASTIC_APP_CREDENTIALS_USR $JELASTIC_APP_CREDENTIALS_PSW $JELASTIC_CREDENTIALS_USR $JELASTIC_CREDENTIALS_PSW $FRONTEND_NAME"
      sh "chmod u+x ./common/e2e/stop-jelastic-env.sh"
      // sh "./common/e2e/stop-jelastic-env.sh $JELASTIC_APP_CREDENTIALS_USR $JELASTIC_APP_CREDENTIALS_PSW $JELASTIC_CREDENTIALS_USR $JELASTIC_CREDENTIALS_PSW $BACKEND_NAME_USR"
      archiveArtifacts artifacts: "${VIDEOS_FOLDER}/**/*.mp4, ${SCREENSHOTS_FOLDER}/**/*.png"
      junit "${TEST_REPORTS_FOLDER}/*.xml"
    }
  }
}